-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity amix is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of amix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "amix_amix,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.512000,HLS_SYN_LAT=228,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=2871,HLS_SYN_LUT=2079,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_35 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal sample_in : STD_LOGIC_VECTOR (31 downto 0);
    signal gain_lp : STD_LOGIC_VECTOR (31 downto 0);
    signal gain_bp : STD_LOGIC_VECTOR (31 downto 0);
    signal gain_hp : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal num_lp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal num_lp_ce0 : STD_LOGIC;
    signal num_lp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_bp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal num_bp_ce0 : STD_LOGIC;
    signal num_bp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_hp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal num_hp_ce0 : STD_LOGIC;
    signal num_hp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_reg_333 : STD_LOGIC_VECTOR (6 downto 0);
    signal sample_hp_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_bp_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_lp_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_13_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_reg_1091 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1091_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_reg_1091_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_540_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_1091_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln57_fu_548_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln57_reg_1095 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln63_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_1057_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln57_reg_1354 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal num_lp_load_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_bp_load_reg_1379 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_hp_load_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul4_reg_1389 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul5_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_bp_1_reg_1409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_337_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_sample_hp_phi_fu_349_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_sample_bp_phi_fu_361_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sample_lp_phi_fu_373_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_phi_ln66_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln69_phi_fu_491_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_13_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln69_fu_1063_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_509_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_516_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1201 : BOOLEAN;
    signal ap_condition_1206 : BOOLEAN;
    signal ap_condition_561 : BOOLEAN;
    signal ap_condition_555 : BOOLEAN;
    signal ap_condition_549 : BOOLEAN;
    signal ap_condition_543 : BOOLEAN;
    signal ap_condition_537 : BOOLEAN;
    signal ap_condition_531 : BOOLEAN;
    signal ap_condition_525 : BOOLEAN;
    signal ap_condition_519 : BOOLEAN;
    signal ap_condition_513 : BOOLEAN;
    signal ap_condition_507 : BOOLEAN;
    signal ap_condition_501 : BOOLEAN;
    signal ap_condition_495 : BOOLEAN;
    signal ap_condition_489 : BOOLEAN;
    signal ap_condition_483 : BOOLEAN;
    signal ap_condition_477 : BOOLEAN;
    signal ap_condition_471 : BOOLEAN;
    signal ap_condition_465 : BOOLEAN;
    signal ap_condition_459 : BOOLEAN;
    signal ap_condition_453 : BOOLEAN;
    signal ap_condition_447 : BOOLEAN;
    signal ap_condition_441 : BOOLEAN;
    signal ap_condition_435 : BOOLEAN;
    signal ap_condition_429 : BOOLEAN;
    signal ap_condition_423 : BOOLEAN;
    signal ap_condition_417 : BOOLEAN;
    signal ap_condition_411 : BOOLEAN;
    signal ap_condition_405 : BOOLEAN;
    signal ap_condition_399 : BOOLEAN;
    signal ap_condition_393 : BOOLEAN;
    signal ap_condition_387 : BOOLEAN;
    signal ap_condition_381 : BOOLEAN;
    signal ap_condition_375 : BOOLEAN;
    signal ap_condition_369 : BOOLEAN;
    signal ap_condition_363 : BOOLEAN;
    signal ap_condition_357 : BOOLEAN;
    signal ap_condition_351 : BOOLEAN;
    signal ap_condition_345 : BOOLEAN;
    signal ap_condition_339 : BOOLEAN;
    signal ap_condition_333 : BOOLEAN;
    signal ap_condition_327 : BOOLEAN;
    signal ap_condition_321 : BOOLEAN;
    signal ap_condition_315 : BOOLEAN;
    signal ap_condition_309 : BOOLEAN;
    signal ap_condition_303 : BOOLEAN;
    signal ap_condition_297 : BOOLEAN;
    signal ap_condition_291 : BOOLEAN;
    signal ap_condition_285 : BOOLEAN;
    signal ap_condition_279 : BOOLEAN;
    signal ap_condition_273 : BOOLEAN;
    signal ap_condition_623 : BOOLEAN;
    signal ap_condition_742 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component amix_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component amix_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component amix_num_lp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component amix_num_bp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component amix_num_hp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component amix_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        sample_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        gain_lp : OUT STD_LOGIC_VECTOR (31 downto 0);
        gain_bp : OUT STD_LOGIC_VECTOR (31 downto 0);
        gain_hp : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    num_lp_U : component amix_num_lp
    generic map (
        DataWidth => 32,
        AddressRange => 51,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => num_lp_address0,
        ce0 => num_lp_ce0,
        q0 => num_lp_q0);

    num_bp_U : component amix_num_bp
    generic map (
        DataWidth => 32,
        AddressRange => 51,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => num_bp_address0,
        ce0 => num_bp_ce0,
        q0 => num_bp_q0);

    num_hp_U : component amix_num_hp
    generic map (
        DataWidth => 32,
        AddressRange => 51,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => num_hp_address0,
        ce0 => num_hp_ce0,
        q0 => num_hp_q0);

    control_s_axi_U : component amix_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => grp_fu_509_p2,
        sample_in => sample_in,
        gain_lp => gain_lp,
        gain_bp => gain_bp,
        gain_hp => gain_hp);

    fadd_32ns_32ns_32_5_full_dsp_1_U1 : component amix_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_509_p0,
        din1 => grp_fu_509_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_509_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component amix_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_516_p0,
        din1 => grp_fu_516_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_516_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component amix_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sample_bp_reg_357,
        din1 => gain_bp,
        ce => ap_const_logic_1,
        dout => grp_fu_522_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_empty_13_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1206)) then 
                    ap_phi_reg_pp0_iter0_empty_13_reg_498 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
                elsif ((ap_const_boolean_1 = ap_condition_1201)) then 
                    ap_phi_reg_pp0_iter0_empty_13_reg_498 <= sample_in;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_phi_ln66_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_742)) then
                if ((ap_const_boolean_1 = ap_condition_623)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_49;
                elsif ((ap_const_boolean_1 = ap_condition_273)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_48;
                elsif ((ap_const_boolean_1 = ap_condition_279)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_47;
                elsif ((ap_const_boolean_1 = ap_condition_285)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_46;
                elsif ((ap_const_boolean_1 = ap_condition_291)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_45;
                elsif ((ap_const_boolean_1 = ap_condition_297)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_44;
                elsif ((ap_const_boolean_1 = ap_condition_303)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_43;
                elsif ((ap_const_boolean_1 = ap_condition_309)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_42;
                elsif ((ap_const_boolean_1 = ap_condition_315)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_41;
                elsif ((ap_const_boolean_1 = ap_condition_321)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_40;
                elsif ((ap_const_boolean_1 = ap_condition_327)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_39;
                elsif ((ap_const_boolean_1 = ap_condition_333)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_38;
                elsif ((ap_const_boolean_1 = ap_condition_339)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_37;
                elsif ((ap_const_boolean_1 = ap_condition_345)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_36;
                elsif ((ap_const_boolean_1 = ap_condition_351)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_35;
                elsif ((ap_const_boolean_1 = ap_condition_357)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_34;
                elsif ((ap_const_boolean_1 = ap_condition_363)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_33;
                elsif ((ap_const_boolean_1 = ap_condition_369)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_32;
                elsif ((ap_const_boolean_1 = ap_condition_375)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_31;
                elsif ((ap_const_boolean_1 = ap_condition_381)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_30;
                elsif ((ap_const_boolean_1 = ap_condition_387)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_29;
                elsif ((ap_const_boolean_1 = ap_condition_393)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_28;
                elsif ((ap_const_boolean_1 = ap_condition_399)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_27;
                elsif ((ap_const_boolean_1 = ap_condition_405)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_26;
                elsif ((ap_const_boolean_1 = ap_condition_411)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_25;
                elsif ((ap_const_boolean_1 = ap_condition_417)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_24;
                elsif ((ap_const_boolean_1 = ap_condition_423)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_23;
                elsif ((ap_const_boolean_1 = ap_condition_429)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_22;
                elsif ((ap_const_boolean_1 = ap_condition_435)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_21;
                elsif ((ap_const_boolean_1 = ap_condition_441)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_20;
                elsif ((ap_const_boolean_1 = ap_condition_447)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_19;
                elsif ((ap_const_boolean_1 = ap_condition_453)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_18;
                elsif ((ap_const_boolean_1 = ap_condition_459)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_17;
                elsif ((ap_const_boolean_1 = ap_condition_465)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_16;
                elsif ((ap_const_boolean_1 = ap_condition_471)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_15;
                elsif ((ap_const_boolean_1 = ap_condition_477)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_14;
                elsif ((ap_const_boolean_1 = ap_condition_483)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_13;
                elsif ((ap_const_boolean_1 = ap_condition_489)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_12;
                elsif ((ap_const_boolean_1 = ap_condition_495)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_11;
                elsif ((ap_const_boolean_1 = ap_condition_501)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_10;
                elsif ((ap_const_boolean_1 = ap_condition_507)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_9;
                elsif ((ap_const_boolean_1 = ap_condition_513)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_8;
                elsif ((ap_const_boolean_1 = ap_condition_519)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_7;
                elsif ((ap_const_boolean_1 = ap_condition_525)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_6;
                elsif ((ap_const_boolean_1 = ap_condition_531)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_5;
                elsif ((ap_const_boolean_1 = ap_condition_537)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_4;
                elsif ((ap_const_boolean_1 = ap_condition_543)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_3;
                elsif ((ap_const_boolean_1 = ap_condition_549)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_2;
                elsif ((ap_const_boolean_1 = ap_condition_555)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_1;
                elsif ((ap_const_boolean_1 = ap_condition_561)) then 
                    ap_phi_reg_pp0_iter0_phi_ln66_reg_381 <= shift_reg_0;
                end if;
            end if; 
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    i_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_333 <= add_ln57_reg_1354;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_333 <= ap_const_lv7_32;
            end if; 
        end if;
    end process;

    sample_bp_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_reg_1091_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sample_bp_reg_357 <= grp_fu_509_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sample_bp_reg_357 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sample_hp_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_reg_1091_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                sample_hp_reg_345 <= grp_fu_509_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sample_hp_reg_345 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sample_lp_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1091_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                sample_lp_reg_369 <= grp_fu_509_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sample_lp_reg_369 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln57_reg_1354 <= add_ln57_fu_1057_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                empty_13_reg_498 <= ap_phi_reg_pp0_iter0_empty_13_reg_498;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_540_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln63_reg_1100 <= icmp_ln63_fu_552_p2;
                trunc_ln57_reg_1095 <= trunc_ln57_fu_548_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_reg_1091_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul4_reg_1389 <= grp_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_1091_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul5_reg_1394 <= grp_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                num_bp_load_reg_1379 <= num_bp_q0;
                num_hp_load_reg_1384 <= num_hp_q0;
                num_lp_load_reg_1374 <= num_lp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_reg_1091_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_528 <= grp_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((tmp_reg_1091_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_534 <= grp_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                sample_bp_1_reg_1409 <= grp_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_fu_552_p2 = ap_const_lv1_1) and (tmp_fu_540_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                shift_reg_0 <= sample_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_1 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_A) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_10 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_B) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_11 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_C) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_12 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_D) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_13 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_E) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_14 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_F) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_15 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_16 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_17 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_18 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_19 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_2 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_20 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_21 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_22 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_23 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_18) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_24 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_25 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_1A) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_26 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_1B) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_27 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_1C) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_28 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_1D) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_29 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_3 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_1E) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_30 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_1F) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_31 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_20) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_32 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_21) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_33 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_22) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_34 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_35 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_24) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_36 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_25) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_37 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_26) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_38 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_27) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_39 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_4 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_28) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_40 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_29) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_41 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_2A) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_42 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_2B) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_43 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_2C) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_44 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_2D) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_45 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_2E) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_46 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_2F) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_47 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_30) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_48 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_49 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_5 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_6 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_7 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_8 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1100 = ap_const_lv1_0) and (trunc_ln57_reg_1095 = ap_const_lv6_9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                shift_reg_9 <= ap_phi_reg_pp0_iter0_phi_ln66_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_1091 <= ap_phi_mux_i_phi_fu_337_p4(6 downto 6);
                tmp_reg_1091_pp0_iter1_reg <= tmp_reg_1091;
                tmp_reg_1091_pp0_iter2_reg <= tmp_reg_1091_pp0_iter1_reg;
                tmp_reg_1091_pp0_iter3_reg <= tmp_reg_1091_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_fu_540_p3, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_540_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_fu_540_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln57_fu_1057_p2 <= std_logic_vector(unsigned(i_reg_333) + unsigned(ap_const_lv7_7F));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(5);
    ap_CS_fsm_state19 <= ap_CS_fsm(8);
    ap_CS_fsm_state20 <= ap_CS_fsm(9);
    ap_CS_fsm_state21 <= ap_CS_fsm(10);
    ap_CS_fsm_state24 <= ap_CS_fsm(13);
    ap_CS_fsm_state25 <= ap_CS_fsm(14);
    ap_CS_fsm_state29 <= ap_CS_fsm(18);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1201_assign_proc : process(tmp_fu_540_p3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln63_fu_552_p2)
    begin
                ap_condition_1201 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_1) and (tmp_fu_540_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_1206_assign_proc : process(tmp_reg_1091, icmp_ln63_reg_1100, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_1206 <= ((icmp_ln63_reg_1100 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_273_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_273 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_31) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_279_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_279 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_30) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_285_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_285 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_2F) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_291_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_291 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_2E) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_297_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_297 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_2D) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_303_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_303 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_2C) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_309_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_309 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_2B) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_315_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_315 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_2A) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_321_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_321 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_29) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_327_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_327 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_28) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_333_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_333 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_27) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_339_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_339 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_26) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_345_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_345 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_25) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_351_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_351 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_24) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_357_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_357 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_23) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_363_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_363 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_22) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_369_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_369 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_21) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_375_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_375 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_20) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_381_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_381 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_1F) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_387_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_387 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_1E) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_393_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_393 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_1D) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_399_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_399 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_1C) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_405_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_405 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_1B) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_411_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_411 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_1A) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_417_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_417 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_19) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_423_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_423 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_18) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_429_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_429 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_17) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_435_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_435 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_16) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_441_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_441 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_15) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_447_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_447 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_14) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_453_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_453 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_13) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_459_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_459 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_12) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_465_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_465 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_11) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_471_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_471 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_10) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_477_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_477 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_F) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_483_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_483 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_E) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_489_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_489 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_D) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_495_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_495 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_C) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_501_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_501 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_B) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_507_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_507 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_A) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_513_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_513 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_9) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_519_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_519 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_8) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_525_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_525 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_7) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_531_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_531 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_6) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_537_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_537 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_5) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_543_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_543 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_4) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_549_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_549 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_3) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_555_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_555 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_2) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_561_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_561 <= ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_1) and (tmp_fu_540_p3 = ap_const_lv1_0));
    end process;


    ap_condition_623_assign_proc : process(tmp_fu_540_p3, trunc_ln57_fu_548_p1, icmp_ln63_fu_552_p2)
    begin
                ap_condition_623 <= ((((((((((((((((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_3E) and (tmp_fu_540_p3 = ap_const_lv1_0)) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_3F) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_3D) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_3C) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_3B) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_3A) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_39) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_38) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_37) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_36) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_35) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_34) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_33) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_32) and (tmp_fu_540_p3 = ap_const_lv1_0))) or ((icmp_ln63_fu_552_p2 = ap_const_lv1_0) and (trunc_ln57_fu_548_p1 = ap_const_lv6_0) and (tmp_fu_540_p3 = ap_const_lv1_0)));
    end process;


    ap_condition_742_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_742 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_fu_540_p3)
    begin
        if ((tmp_fu_540_p3 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_337_p4_assign_proc : process(i_reg_333, ap_enable_reg_pp0_iter1, tmp_reg_1091, ap_CS_fsm_pp0_stage0, add_ln57_reg_1354, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_reg_1091 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_337_p4 <= add_ln57_reg_1354;
        else 
            ap_phi_mux_i_phi_fu_337_p4 <= i_reg_333;
        end if; 
    end process;


    ap_phi_mux_phi_ln69_phi_fu_491_p4_assign_proc : process(tmp_reg_1091, trunc_ln57_reg_1095, icmp_ln63_reg_1100)
    begin
        if (((icmp_ln63_reg_1100 = ap_const_lv1_0) and (tmp_reg_1091 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln69_phi_fu_491_p4 <= trunc_ln57_reg_1095;
        else 
            ap_phi_mux_phi_ln69_phi_fu_491_p4 <= ap_const_lv6_0;
        end if; 
    end process;


    ap_phi_mux_sample_bp_phi_fu_361_p4_assign_proc : process(sample_bp_reg_357, grp_fu_509_p2, tmp_reg_1091_pp0_iter2_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_reg_1091_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_sample_bp_phi_fu_361_p4 <= grp_fu_509_p2;
        else 
            ap_phi_mux_sample_bp_phi_fu_361_p4 <= sample_bp_reg_357;
        end if; 
    end process;


    ap_phi_mux_sample_hp_phi_fu_349_p4_assign_proc : process(sample_hp_reg_345, grp_fu_509_p2, tmp_reg_1091_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (tmp_reg_1091_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_sample_hp_phi_fu_349_p4 <= grp_fu_509_p2;
        else 
            ap_phi_mux_sample_hp_phi_fu_349_p4 <= sample_hp_reg_345;
        end if; 
    end process;


    ap_phi_mux_sample_lp_phi_fu_373_p4_assign_proc : process(sample_lp_reg_369, grp_fu_509_p2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2, tmp_reg_1091_pp0_iter2_reg, ap_block_pp0_stage3)
    begin
        if (((tmp_reg_1091_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            ap_phi_mux_sample_lp_phi_fu_373_p4 <= grp_fu_509_p2;
        else 
            ap_phi_mux_sample_lp_phi_fu_373_p4 <= sample_lp_reg_369;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_509_p0_assign_proc : process(reg_528, ap_enable_reg_pp0_iter1, reg_534, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_phi_mux_sample_hp_phi_fu_349_p4, ap_block_pp0_stage1, ap_phi_mux_sample_bp_phi_fu_361_p4, ap_phi_mux_sample_lp_phi_fu_373_p4, ap_block_pp0_stage3, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_509_p0 <= reg_534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_509_p0 <= reg_528;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_509_p0 <= ap_phi_mux_sample_hp_phi_fu_349_p4;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_509_p0 <= ap_phi_mux_sample_bp_phi_fu_361_p4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_509_p0 <= ap_phi_mux_sample_lp_phi_fu_373_p4;
        else 
            grp_fu_509_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_509_p1_assign_proc : process(reg_528, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, mul4_reg_1389, mul5_reg_1394, sample_bp_1_reg_1409, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_CS_fsm_state20, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_509_p1 <= sample_bp_1_reg_1409;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_509_p1 <= mul5_reg_1394;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_509_p1 <= mul4_reg_1389;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)))) then 
            grp_fu_509_p1 <= reg_528;
        else 
            grp_fu_509_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_516_p0_assign_proc : process(sample_hp_reg_345, sample_lp_reg_369, empty_13_reg_498, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_CS_fsm_state16, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_516_p0 <= sample_hp_reg_345;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_516_p0 <= sample_lp_reg_369;
        elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            grp_fu_516_p0 <= empty_13_reg_498;
        else 
            grp_fu_516_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_516_p1_assign_proc : process(gain_lp, gain_hp, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, num_lp_load_reg_1374, num_bp_load_reg_1379, num_hp_load_reg_1384, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_CS_fsm_state16, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_516_p1 <= gain_hp;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_516_p1 <= gain_lp;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_516_p1 <= num_hp_load_reg_1384;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_516_p1 <= num_bp_load_reg_1379;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_516_p1 <= num_lp_load_reg_1374;
        else 
            grp_fu_516_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln63_fu_552_p2 <= "1" when (ap_phi_mux_i_phi_fu_337_p4 = ap_const_lv7_0) else "0";
    num_bp_address0 <= zext_ln69_fu_1063_p1(6 - 1 downto 0);

    num_bp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            num_bp_ce0 <= ap_const_logic_1;
        else 
            num_bp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    num_hp_address0 <= zext_ln69_fu_1063_p1(6 - 1 downto 0);

    num_hp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            num_hp_ce0 <= ap_const_logic_1;
        else 
            num_hp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    num_lp_address0 <= zext_ln69_fu_1063_p1(6 - 1 downto 0);

    num_lp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            num_lp_ce0 <= ap_const_logic_1;
        else 
            num_lp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_540_p3 <= ap_phi_mux_i_phi_fu_337_p4(6 downto 6);
    trunc_ln57_fu_548_p1 <= ap_phi_mux_i_phi_fu_337_p4(6 - 1 downto 0);
    zext_ln69_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_phi_ln69_phi_fu_491_p4),32));
end behav;
